users
	anonymous

interfaces

root {
	'Applicant': group {
		'ID': collection ['Applicant ID'] {
			'Applicant ID': text @default: auto-increment
			'First Name': text
			'Surname': text
			'Country of birth': text
			'Date of birth': number 'Date'
			'Gender': stategroup (
				'Male' { }
				'Female' { }
				'Diverse' { }
			)
			'Country': stategroup (
				'Syria' { }
				'Afghanistan' { }
				'Eritrea' { }
				'Iraq' { }
				'Iran'	{ }
				'Turkey' { }
				'Other' {
					'Other country': text
				}
			)
			'Documents': collection ['Document ID'] {
				'Document ID': text @default: auto-increment
				'Document Typ': stategroup (
					'Passport' { }
					'ID Card' { }
					'Drivers license' { }
					'Birth certificate' { }
					'Other proof of ID' { }
				)
				'File': file
			}
		}

		'Appearance': collection ['Applicant ID'] {
			'Applicant ID': text @default: auto-increment
			'Height': number positive 'Centimeters'
			'Weight': number positive 'Kilograms'
			'Eye color': stategroup (
				'Brown' { }
				'Blue' { }
				'Green' { }
				'Other' { }
			)
		}


	'Add Refuge': command {
		'Add Applicant ID': text @default: auto-increment
			'Add First Name': text
			'Add Surname': text
			'What is the Country of birth': text
			'What is the Date of birth': number 'Date'
			'What is the Gender of the Refuge?': stategroup (
				'Male' { }
				'Female' { }
				'Diverse' { }
		)
		'What Country are you from': stategroup (
			'Syria' { }
			'Afghanistan' { }
			'Eritrea' { }
			'Iraq' { }
			'Iran'	{ }
			'Turkey' { }
		)
		'Documents': collection ['Document ID'] {
			'Document ID': text @default: auto-increment
			'Document Typ': stategroup (
					'Passport' { }
					'ID Card' { }
					'Drivers license' { }
					'Birth certificate' { }
					'Other proof of ID' { }
				)
				'File': file
			}
	} => update .'ID' = create (
		'Applicant ID' = @ .'Add Applicant ID'
		'First Name' = @ .'Add First Name'
		'Surname' = @ .'Add Surname'
		'Country of birth' = @ .'What is the Country of birth'
		'Date of birth' = @ .'What is the Date of birth'
		'Gender' = switch @ .'What is the Gender of the Refuge?' (
			|'Male' => create 'Male' ( )
			|'Female'  => create 'Female' ( )
			|'Diverse' => create 'Diverse' ( )
			)
		'Country' = switch @ .'What Country are you from' (
			|'Syria' => create 'Syria' ( )
			|'Afghanistan' => create 'Afghanistan' ( )
			|'Eritrea' => create 'Eritrea' ( )
			|'Iraq' => create 'Iraq' ( )
			|'Iran'	=> create 'Iran' ( )
			|'Turkey' => create 'Turkey' ( )
			)
		'Documents' = walk @ .'Documents' as $ (
			create (
				'Document ID' = $ .'Document ID'
				'Document Typ' = switch $ .'Document Typ' (
					|'Passport' => create 'Passport' ( )
					|'ID Card' => create 'ID Card' ( )
					|'Drivers license' => create 'Drivers license' ( )
					|'Birth certificate' => create 'Birth certificate' ( )
					|'Other proof of ID'	=> create 'Other proof of ID' ( )
					)
				'File' = $ . 'File'
				)

			)
		)




	'Add Refuge!': action {
		'Applicant ID': text @default: auto-increment
			'First Name': text
			'Surname': text
			'Country of birth': text
			'Date of birth': text
			'Gender': stategroup (
				'Male' { }
				'Female' { }
				'Diverse' { }
		)
		'Country': stategroup (
			'Syria' { }
			'Afghanistan' { }
			'Eritrea' { }
			'Iraq' { }
			'Iran'	{ }
			'Turkey' { }
		)
		'Documents': collection ['Provide Document ID'] {
			'Applicant ID': text @default: auto-increment
			'Provide Document ID': text
			'Passport?': stategroup (
				'Yes' {
					'Passport file': file
				}
				'No' { }
			)
			'ID-card?': stategroup (
				'Yes' {
					'ID-Card file': file
				}
				'No' { }
			)
			'Drivers license?': stategroup (
				'Yes' {
					'Drivers license file': file
				}
				'No' { }
			)
			'Birth certificate?': stategroup (
				'Yes' {
					'Birth certificate file': file
				}
				'No' { }
			)
			'Other proof of ID?': stategroup (
				'Yes' {
					'Other ID file': file
				}
				'No' { }
			)

		}
	} => update .'ID' = create ( )

	}






}

numerical-types
	'eurocent'
		= 'units' * 'eurocent'
		= 'fraction' * 'eurocent'
		@numerical-type: (
			label: "Euro"
			decimals: 2
		)
	'thousandth eurocent'
		= 'thousandth eurocent' * 'units'
		= 'thousandth eurocent' / 'units'
		@numerical-type: (
			label: "Euro"
			decimals: 5
		)
	'chairs'
	'units'
	'percent'
	'fraction'
		= 'percent' / 1 * 10 ^ 2
	'Centimeters'
	'Kilograms'
	'days'
	'Date' in 'days'
		@date
